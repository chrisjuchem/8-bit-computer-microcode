#define SHIFT_DATA 2
#define SHIFT_CLOCK 3
#define SHIFT_LATCH_OUTPUT 4
#define EEPROM_ENABLE 5
#define EEPROM_LSB 6
#define EEPROM_MSB 13

const bool BIG_CHIP = false;

const int ADDRESS_MASK_BIG =   (0b00011111 << 8) + 0xff;
const int WRITE_ENABLE_BIG =    0b00100000 << 8;
const int ADDRESS_MASK_SMALL = (0b00000111 << 8) + 0xff;
const int WRITE_ENABLE_SMALL =  0b00001000 << 8;
const int OUTPUT_ENABLE =       0b10000000 << 8;

const int ADDRESS_MASK = BIG_CHIP ? ADDRESS_MASK_BIG : ADDRESS_MASK_SMALL;
const int WRITE_ENABLE = BIG_CHIP ? WRITE_ENABLE_BIG : WRITE_ENABLE_SMALL;

void setAddress(int address, bool writing) {
  int masked = address & ADDRESS_MASK;
  int control_bits = writing ? OUTPUT_ENABLE : WRITE_ENABLE; // backwards bc active low
  masked = masked | control_bits;
  
  shiftOut(SHIFT_DATA, SHIFT_CLOCK, MSBFIRST, masked >> 8);
  shiftOut(SHIFT_DATA, SHIFT_CLOCK, MSBFIRST, masked);
  digitalWrite(SHIFT_LATCH_OUTPUT, HIGH);
  digitalWrite(SHIFT_LATCH_OUTPUT, LOW);
}
void setAddressWrite(int address) {
    setAddress(address, true);
}
void setAddressRead(int address) {
    setAddress(address, false);
}

void writeEEPROM(int address, byte data) {
  digitalWrite(EEPROM_ENABLE, HIGH);
  setAddressWrite(address);
  for (int pin = EEPROM_LSB; pin <= EEPROM_MSB; pin += 1) {
    pinMode(pin, OUTPUT);
    digitalWrite(pin, data & 1);
    data = data >> 1;
  }
  digitalWrite(EEPROM_ENABLE, LOW);
  delayMicroseconds(1);
  digitalWrite(EEPROM_ENABLE, HIGH);
  delay(10);
}

byte readEEPROM(int address) {
  setAddressRead(address);
  digitalWrite(EEPROM_ENABLE, LOW);
  byte data = 0;
  for (int pin = EEPROM_MSB; pin >= EEPROM_LSB; pin -= 1) {
    pinMode(pin, INPUT);
    data = (data << 1) + digitalRead(pin);
  }
  return data;
}

void dumpEEPROM() {
  for (int base = 0; base <= ADDRESS_MASK; base += 16) {
    byte data[16];
    for (int offset = 0; offset <= 15; offset += 1) {
      data[offset] = readEEPROM(base + offset);
    }

    char buf[80];
    sprintf(buf, "%03x:  %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x",
            base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
            data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);

    Serial.println(buf);
  }
}

//=======================================================================

const bool HIGH_CHIP = {{ high_chip }};

const PROGMEM uint16_t instructions[2048] = {{ microcode }};
const PROGMEM byte programs[8][256] {
    {{ prog0 }},
    {{ prog1 }},
    {{ prog2 }},
    {{ prog3 }},
    {{ prog4 }},
    {{ prog5 }},
    {{ prog6 }},
    {{ prog7 }},
};

void writeInstructions() {
  if (BIG_CHIP) {
    Serial.println("BIG_CHIP must be false! Skipping");
    return;
  }
  if (HIGH_CHIP) {
    Serial.print("[ Writing HI.... ]\n[");
  } else {
    Serial.print("[ Writing LOW... ]\n[");
  }

  for (int n = 0; n < 2048; n++) {
    uint16_t instr = instructions[n];
    if (HIGH_CHIP) {
      instr = instr >> 8;
    }
    writeEEPROM(n, instr ^ 0xff);

    if (n % 32 == 31) {
      Serial.print(".");
    }
  }
  Serial.println("]");
}

void writePrograms() {
  Serial.print("[ Writing PROGRAMS... ]\n[");

  for (int n = 0; n < 8; n++) {
    for (int i = 0; i < 256; i++) {
      byte instr = programs[n][i];
      writeEEPROM(n * 256 + i, instr ^ 0xff );

      if (i % 32 == 31) {
        Serial.print(".");
      }
    }
  }
}

//=======================================================================

void setupPins() {
  pinMode(SHIFT_DATA, OUTPUT);
  pinMode(SHIFT_CLOCK, OUTPUT);
  pinMode(SHIFT_LATCH_OUTPUT, OUTPUT);
  digitalWrite(SHIFT_LATCH_OUTPUT, LOW);
  pinMode(EEPROM_ENABLE, OUTPUT);
  digitalWrite(EEPROM_ENABLE, HIGH); //disable chip by default
}

const bool ROM_CHIP = {{ rom_chip }};

void setup() {
  Serial.begin(115200);
  setupPins();


  if (ROM_CHIP) {
    writePrograms();
  } else {
    writeInstructions();
  }
  dumpEEPROM();
}

void loop() {
  // put your main code here, to run repeatedly:
}